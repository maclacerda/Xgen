//
//  Readme.swift
//  Xgen
//
//  Created by Marcos Ferreira on 09/09/22.
//

enum Readme {
    case content(_ podName: String, repoName: String, repoPath: String, author: String, authorMail: String, hasPodfile: Bool, hasMock: Bool, hasUnitTest: Bool, hasSample: Bool, hasMakefile: Bool, hasReadme: Bool, hasCodeOwners: Bool)
    
    var value: String {
        switch self {
        case .content(let podName, let repoName, let repoPath, let author, let authorMail, let hasPodfile, let hasMock, let hasUnitTest, let hasSample, let hasMakefile, let hasReadme, let hasCodeOwners):
            let makeSnippet = """

                * Execute the commands of the section bellow to continue:

                <br/>

                ## Make Commands üß∞

                Inside of project folder you have a file named `MakeFile`, this file is responsible for automate and to guarantee that all things are correct configured.
                <br/>
                Follow a table with all available commands and what each of them does:
                <br/>

                | Command | Description | One time execution |
                | --- | --- | --- |
                | `make setup_environment` | Command responsible for installing the libs used for quality management and creating the Xcode project | :heavy_check_mark: |
                | `make config_scripts_permissions` | Command responsible for granting the proper execution permissions to the scripts that are used by xcodegen | :heavy_check_mark: |
                |  `make project` | Command responsible for reading the `project.yml` file and generating xcodeproj using xcodegen |
                | `make project_and_open` | Command similar to the previous command, with the difference that after generating the project it is opened in Xcode. [1] |
                | `make clean` | Command responsible for removing all dependency caches and deleting the files generated by xcodegen |

                <br/>

                **Important notes:**

                [1] - The use of the `project` or `project_and_open` command is of free choice, leaving the developer to choose which command best suits him.

            """
            
            let unitTestSnippet = """
            
            # Unit Tests ‚úÖ

            This module has unit tests and the ideal is to keep the minimum coverage of 80% for new developments.

            <br/>

            """
            
            return """
            # {PODNAME}

            [![Build](https://img.shields.io/github/workflow/status/santander-group-europe/{REPO_NAME}/{REPO_NAME}-build?style=flat-square)]()
            [![Version](https://img.shields.io/cocoapods/v/{PODNAME}?style=flat-square)](https://cocoapods.org/pods/{PODNAME})
            [![License](https://img.shields.io/cocoapods/l/{PODNAME}?style=flat-square)](https://cocoapods.org/pods/{PODNAME})
            [![Platform](https://img.shields.io/cocoapods/p/{PODNAME}?style=flat-square)](https://cocoapods.org/pods/{PODNAME})

            This repo contains the sources of `{PODNAME}` module of Santander One App project. This module only attends the Portugal country.

            <br/>

            # Architecture ‚öôÔ∏è

            The architecture used to build this module was MVVM-C (Model / View / ViewModel - Coordinator).

            <br/>

            # Pre-Requirements ‚ö†Ô∏è

            * Homebrew [see more](https://brew.sh)
            * Ruby 2.6.3+ (inside MacOS)
            * Swift 5.0+
            * Xcode 13+

            <br/>

            # Tools used üõ†

            * Xcodegen 2.20.0+ [see more](https://github.com/yonaskolb/XcodeGen)
            * Swiftlint 0.48.0+ [see more](https://github.com/realm/SwiftLint)
            * Cocoapods
            * xcodeproj (Ruby gem)

            <br/>

            # Envrioment Setup üñ•

            Follow the bellow steps to setup your envrioment.

            * Checkout this repo on your preference folder.
            * Open the previous folder on terminal{HAS_MAKEFILE}
            <br/>

            # Local Build üõ†

            Open project folder in terminal, and type `xcodegen`.

            <br/>{HAS_UNIT_TEST}

            # Installation üì¶

            {PODNAME} is available through [CocoaPods](https://cocoapods.org). To install
            this pod, add to your Podfile the desired option:

            For the framework generated from the mat:

            ```ruby
            pod '{PODNAME}', '~> 1.0.0'
            ```

            For the source code (only from development scenes):

            ```ruby
            pod '{PODNAME}/Development', :git => 'https://github.com/santander-group-europe/{REPO_NAME}', :branch => 'develop'
            ```

            ```ruby
            pod '{PODNAME}/Development', :path => '/Users/username/.../{REPO_PATH}'
            ```

            <br/>

            # How to use the mocks? üí°

            Add in `Envrioment Variables` the follow parameter:

            ```ruby
            MOCK_ENV: YES
            ```

            <br/>

            # How is it structured? üèó

            When opening `{PODNAME}.xcworkspace`, you will find the following structure:

            ```
            |__ {PODNAME}
            |       |__ Resources: Folder for files like `.xcassets`, `.strings`, `.xib`, etc
            |               |__ Localizables: Folder contains all localizable files in `{PODNAME}` module
            |       |__ Sources: Folder for source files
            |               |
            |               |__ Features: Folder contains all developed features on module
            |__ {PODNAME}Sample (Example project for local execution of the `{PODNAME}` module)
            |__ {PODNAME}Mock (Mocks target)
            |__ {PODNAME}Tests (Module unit tests)

            ```

            <br/>

            # How to run the project? üí°

            To run this project, go to the scheme selector (`{PODNAME}` and `{PODNAME}Sample`) and select one according to what you want to run.

            <br/>

            # And how to runt the unit tests? üí°

            The tests are linked to the `{PODNAME}` scheme. Hold down the `Run` button and change it to `Tests`.
            <br/>
            We recommend running the unit tests in the `iPhone 8` simulator to avoid possible errors in the treadmill test step.

            <br/>

            # Acceptance criteria in PR üìù

            All PR for the following branches must be approved by at least one of the project's [CODEOWNERS](CODEOWNERS).

            - master
            - develop
            - release

            <br/>

            # How to release a new pod version? üìê

            For release new versions for this pod, follow these steps:

            - Create and checkout a new branch with prefix: `release/candidate-x.x.x` replacing the `x.x.x` for version you want to rollout, with base in `release` branch. This branch is a mirror of `master`.
            - In the created branch open the `version` file in your liked editor and change the first line of file with the `x.x.x` version number, and the last line with your build version. After this, save and close the file.
            - Run the `xcodegen` command, this step is responsible for update the files: `{PODNAME}.podspec` and `README.md` with new generated version.
            - Commit and push the changes in your branch, and open the `PR` to `release` branch.
            - With the `PR` reviewed and merged in `release` branch opens an another `PR` from `release` to `master` branch.
            - After this `PR` merged in the `master` branch the `CI` automatically releases a new version of pod to usage.
            - In case success of last step open two news `PR`s to `develop` and `release` based in `master` branch in order to execute the merge back with new changes.

            <br/>

            # Author ¬©Ô∏è

            {AUTHOR}, {AUTHOR_MAIL}

            <br/>

            # License üìÑ

            {PODNAME} is available under the MIT license. See the [LICENSE](LICENSE) file for more info.
            """
                .replacingOccurrences(of: "{HAS_MAKEFILE}", with: makeSnippet)
                .replacingOccurrences(of: "{HAS_UNIT_TEST}", with: unitTestSnippet)
                .replacingOccurrences(of: "{REPO_NAME}", with: repoName)
                .replacingOccurrences(of: "{REPO_PATH}", with: repoPath.lowercased())
                .replacingOccurrences(of: "{AUTHOR}", with: author)
                .replacingOccurrences(of: "{AUTHOR_MAIL}", with: authorMail)
                .replacingOccurrences(of: "{PODNAME}", with: podName)
        }
    }
}

